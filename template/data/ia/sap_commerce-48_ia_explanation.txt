The correct answers are **Option 1 (View all constraints in the system)** and **Option 3 (Reload constraints into the validation engine).**

Here's a detailed explanation of why these are correct and why the others are not, along with practical examples:

**Correct Options:**

* **1. View all constraints in the system:** The Backoffice Administration Cockpit provides a dedicated section for managing type system. Within this, you can navigate to the "Constraints" area to view all defined constraints.  This includes details such as the constraint's ID, type, target type, and associated annotation. This view allows administrators to understand the existing validation rules enforced on different data types within the system.

    * **Practical Example:** Imagine you're troubleshooting an issue where a product's code is not being saved due to a validation error.  You can navigate to the Backoffice, go to the "System" area, then "Types," and finally "Constraints."  Here, you can search for constraints related to the `Product` type's `code` attribute.  This allows you to inspect the constraint definition (e.g., a regular expression ensuring the code follows a specific format) and identify potential problems.

* **3. Reload constraints into the validation engine:**  After modifying or adding constraints (typically done through code changes and deployments), you need to reload them into the validation engine for the changes to take effect.  The Backoffice Administration Cockpit provides functionality to trigger this reload.  This avoids the need for a full system restart, which can be time-consuming.

    * **Practical Example:**  Let's say a developer has added a new constraint to ensure that product descriptions are at least 50 characters long. After deploying the code containing this new constraint, an administrator would go to the Backoffice, navigate to the "System" area, then "Types," and then "Constraints." There, they'd find a button or menu option to "Reload Constraints." This action ensures the new constraint is active without requiring a system restart.



**Incorrect Options:**

* **2. Create a constraint method:** While you *define* constraints within the system, the actual *implementation* of the validation logic (the constraint method) is done in Java code, not directly within the Backoffice. The Backoffice primarily deals with managing the *metadata* about the constraints, not the coding of the validation logic itself.  You would typically create a custom constraint by implementing the `ConstraintValidator` interface in your extension.

* **4. Create a new constraint type:** Similar to creating constraint methods, creating entirely new constraint *types* (e.g., a new type of validation rule beyond the standard ones like "NotNull," "Size," etc.) requires code changes and is not something done directly in the Backoffice.  This involves creating new annotations and associated validators within your custom code.


In summary, the Backoffice Administration Cockpit is a tool for *managing* and *monitoring* constraints, not for creating the underlying code that implements them. You can view existing constraints and force a reload of the validation engine, but the actual development of constraints happens through code.
