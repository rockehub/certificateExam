The correct answers are **Option 1: To specify the layout of a page** and **Option 4: To specify the shared slots**.

In SAP Commerce, page templates are crucial for defining the structure and visual appearance of web pages.  They act as blueprints, dictating where different content elements (components) will be placed. Let's break down why options 1 and 4 are correct, and why 2 and 3 are not:

**1. To specify the layout of a page:**  This is the primary function of a page template.  It defines the overall arrangement of content.  Think of it like a website's skeleton.  A template might specify that a page should have a header, a main content area, a sidebar, and a footer.  The *layout* determines the positioning and relative sizes of these sections.  This layout can include things like CSS classes, responsive design elements, and placement of specific HTML tags.  You build the visual structure using these elements within the template.

**4. To specify the shared slots:**  Page templates define *slots*—placeholders where content components can be inserted.  *Shared slots* are especially important; they're slots that appear consistently across multiple pages. This promotes consistency and simplifies maintenance.  For example, a shared slot might be designated for a navigation menu or a copyright notice.  By defining these shared slots in a template, you ensure that all pages using that template have these elements in the same location, without needing to manually add them to each page individually.

**Why options 2 and 3 are incorrect:**

**2. To add restrictions to a page:** Page templates don't directly enforce restrictions on page content. While you can indirectly influence content through the available slots (e.g., limiting the number of components allowed in a slot), they don't provide a mechanism for explicitly restricting content types or values.  Access control and validation are handled through other mechanisms within SAP Commerce (e.g., permissions, validation rules).

**3. To create page components:** Page templates *use* page components but don't *create* them.  Components are separate entities – reusable pieces of content (e.g., a product listing, a banner image, a form).  The template defines *where* these components are placed, not how they are built.


**Practical Example:**

Let's say you're building an e-commerce website. You might create two page templates:

* **`productDetailTemplate`:** This template defines a layout for individual product pages.  It includes slots for:
    * `productImage`:  Displays the main product image.
    * `productName`: Displays the product name.
    * `productDescription`: Displays a detailed description.
    * `productReviews`: Displays customer reviews.
    * `relatedProducts`: Displays related products.
* **`homePageTemplate`:** This template defines the layout for the home page. It includes slots for:
    * `featuredProducts`:  A carousel showcasing featured products.
    * `latestNews`:  Displays the latest news or blog posts.
    * `promoBanner`:  A large promotional banner.

Both templates could share slots like `header` (for the main navigation) and `footer` (for copyright information).  Creating these shared slots avoids redundant work and maintains a consistent look and feel across your website.

When creating specific product pages or the home page, you would choose the appropriate template and then populate its slots with the relevant components.  The templates ensure that the content is organized consistently according to the predefined layout and the use of shared slots ensures a consistent branding across the website.
